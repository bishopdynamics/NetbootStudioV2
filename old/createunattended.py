#!/usr/local/bin/python3
# Netboot Studio service - CreateUnattended functions

#    This file is part of Netboot Studio, a system for managing netboot clients
#    Copyright (C) 2019 James Bishop (jamesbishop2006@gmail.com)

# ignore rules:
#   docstring
#   snakecasevars
#   too-broad-exception
#   line-too-long
#   too-many-branches
#   too-many-statements
#pylint: disable=C0111,C0103,W0703,C0301,R0912,R0915

import os
import time
import subprocess

LOCAL_STORAGE_FOLDER = '/opt/tftp-root'

UNATTENDED_FOLDER = '%s/unattended' % LOCAL_STORAGE_FOLDER
JOB_STATUS_FOLDER = '/tmp/netboot-studio-jobs'
LOG_FILE = '/tmp/netboot-studio.log'

def logmessage(msg):
    timestamp = time.asctime()
    print('%s - %s' % (timestamp, msg))
    with open(LOG_FILE, 'at', encoding='utf-8') as f:
        f.write('%s - %s\n' % (timestamp, msg))

# helper for testing
def WriteJobProgress(job_id, progress):
    job_folder = '%s/%s' % (JOB_STATUS_FOLDER, job_id)
    job_file_progress = '%s/progress' % (job_folder)
    with open(job_file_progress, 'wt', encoding='utf-8') as f:
        f.write('%s' % progress)

def CorrectInputData(input_data):
    # iterate over input keys and correct as needed
    #   transform any bools into lowercase strings
    #   our three current target OS types (windows, debian, vmware esxi) all want bools as lowercase
    #   python wants to convert bool to string as Titlecase
    modified_data = dict()
    try:
        for key_name in input_data:
            orig_value = input_data[key_name]
            # TODO - duck typing is preferred method of checking type - https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance
            if type(orig_value) is bool:
                if orig_value:
                    modified_data[key_name] = 'true'
                else:
                    modified_data[key_name] = 'false'
            else:
                modified_data[key_name] = orig_value
    except Exception as e:
        logmessage('Unexpected exception while correcting input data: %s' % e)
    return modified_data


def CreateUnattended_Windows(job_id, orig_data):
    logmessage('creating an unattended answer file for windows')
    input_data = CorrectInputData(orig_data)
    try:
        file_name = input_data['filename']
        if not file_name:
            raise Exception('missing "name" from input_data')
        final_file = '%s/%s' % (UNATTENDED_FOLDER, file_name)
        if os.path.exists(final_file):
            raise Exception('file named: %s already exists' % final_file)
        job_folder = '%s/%s' % (JOB_STATUS_FOLDER, job_id)
        script_file = '%s/jobscript.sh' % job_folder
        log_file_stdout = '%s/log-stdout.txt' % job_folder
        log_file_stderr = '%s/log-stderr.txt' % job_folder
        script_content = '''
        #!/bin/bash
        # Netboot Studio - generate unattend.xml for windows

        #    This file is part of Netboot Studio, a system for managing netboot clients
        #    Copyright (C) 2019 James Bishop (jamesbishop2006@gmail.com)

        # best heredoc explanation ever: https://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash


        ######################################################### provided by python side
        FINAL_FILE='%s'
        PROCESSOR_ARCH='%s'
        UI_LANGUAGE='%s'
        INPUT_LOCALE='%s'
        USER_NAME='%s'
        USER_PASSWORD_PLAINTEXT='%s'
        USER_PASSWORD='%s'
        USER_PRIMARY_GROUP='%s'
        HOSTNAME='%s'
        PRODUCT_KEY='%s'
        SKIP_REARM='%s' # boolint
        ENABLE_LUA='%s'
        SKIP_AUTO_ACTIVATION='%s'
        CEIP_ENABLED='%s' # boolint
        DISABLE_AUTO_DAY_LIGHT_TIME_SET='%s'
        PROTECT_YOUR_PC='%s' # int
        NETWORK_LOCATION='%s'
        ######################################################### end provided by python side



        # static vars
        HEADER_COMMENT='Autogenerated by Netboot Studio'
        COMPONENT_SCHEMA_STATE='http://schemas.microsoft.com/WMIConfig/2002/State'
        COMPONENT_SCHEMA_INSTANCE='http://www.w3.org/2001/XMLSchema-instance'
        REG_KEY_CONTROLPANEL='HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel'
        LANGUAGE='neutral'
        VERSION_SCOPE='nonSxS'
        MS_PUBLIC_KEY='31bf3856ad364e35'

        if [ -f "${FINAL_FILE}" ]; then
            echo "target file already exists, aborting"
            echo "target file: ${FINAL_FILE}"
            exit 1
        fi

        touch "${FINAL_FILE}" || {
            echo "failed to touch ${FINAL_FILE}, aborting"
            exit 1
        }

        # Local vars
        TEMP_FILE=$(mktemp)

        # windows unattend.xml has some keys that want 'true' or 'false', and others that want '1' or '0'
        #   for the sake of sanity on the UI side, we use a checkbox widget that only deals in 'true' or 'false'
        #   as such, we need to convert specific vars to corresponding '1' or '0'

        # list of bool vars that need to actually be 1 or 0
        BOOL_INT_VARS='SKIP_REARM
        CEIP_ENABLED
        '

        # List of important vars
        ALL_IMPORTANT_VARS='FINAL_FILE
        HEADER_COMMENT
        COMPONENT_SCHEMA_STATE
        COMPONENT_SCHEMA_INSTANCE
        PROCESSOR_ARCH
        MS_PUBLIC_KEY
        LANGUAGE
        UI_LANGUAGE
        INPUT_LOCALE
        VERSION_SCOPE
        REG_KEY_CONTROLPANEL
        USER_NAME
        USER_PASSWORD
        USER_PRIMARY_GROUP
        HOSTNAME
        PRODUCT_KEY
        SKIP_REARM
        ENABLE_LUA
        SKIP_AUTO_ACTIVATION
        CEIP_ENABLED
        DISABLE_AUTO_DAY_LIGHT_TIME_SET
        PROTECT_YOUR_PC
        '

        # check important vars
        function checkVars {
            for VAR in $ALL_IMPORTANT_VARS; do
            if [ -z "${!VAR}" ]; then
                echo "var [$VAR] has unacceptable value: ${!VAR}"
                exit 0
            fi
            for INT_VAR in $BOOL_INT_VARS; do
                # if this varname is in list of bool-int vars then convert its value to 0 or 1
                if [ "$VAR" = "$INT_VAR" ]; then
                if [ "${!VAR}" = "true" ] || [ "${!VAR}" = "True" ]; then
                    eval "${VAR}=1"
                else
                    eval "${VAR}=0"
                fi
                echo "converted $VAR to boolint value: ${!VAR}"
                fi
            done
            done
            echo "Variable check successfull"
        }

        # for debugging, print all important vars and their values
        function showVars {
        for VAR in $ALL_IMPORTANT_VARS; do
            echo "${VAR}=\\"${!VAR}\\""
        done
        }

        checkVars
        # showVars

        ######################################################### Generate File Starts Here #########################################################
        #############################################################################################################################################


        #########################################################  File Header  #########################################################
        cat << END_HEADER >> "${TEMP_FILE}"
        <!--*************************************************
        ${HEADER_COMMENT}
        **************************************************-->
        <?xml version="1.0" encoding="UTF-8"?>
        <unattend xmlns="urn:schemas-microsoft-com:unattend">
        END_HEADER
        #########################################################   End File Header  #########################################################


        #########################################################  Body Pass WinPE  #########################################################
        cat << END_BODY_PASS_WINPE_HEAD >> "${TEMP_FILE}"
        <settings pass="windowsPE">
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <SetupUILanguage>
                <UILanguage>${UI_LANGUAGE}</UILanguage>
            </SetupUILanguage>
            <InputLocale>${INPUT_LOCALE}</InputLocale>
            <SystemLocale>${UI_LANGUAGE}</SystemLocale>
            <UILanguage>${UI_LANGUAGE}</UILanguage>
            <UILanguageFallback>en-US</UILanguageFallback>
            <UserLocale>${UI_LANGUAGE}</UserLocale>
            </component>
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-Setup" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
        END_BODY_PASS_WINPE_HEAD

        cat << END_BODY_PASS_WINPE_DISK >> "${TEMP_FILE}"
            <DiskConfiguration>
                <Disk wcm:action="add">
                <DiskID>0</DiskID>
                <WillWipeDisk>true</WillWipeDisk>
                <CreatePartitions>
                    <!-- Windows RE Tools partition -->
                    <CreatePartition wcm:action="add">
                    <Order>1</Order>
                    <Type>Primary</Type>
                    <Size>300</Size>
                    </CreatePartition>
                    <!-- System partition (ESP) -->
                    <CreatePartition wcm:action="add">
                    <Order>2</Order>
                    <Type>EFI</Type>
                    <Size>100</Size>
                    </CreatePartition>
                    <!-- Microsoft reserved partition (MSR) -->
                    <CreatePartition wcm:action="add">
                    <Order>3</Order>
                    <Type>MSR</Type>
                    <Size>128</Size>
                    </CreatePartition>
                    <!-- Windows partition -->
                    <CreatePartition wcm:action="add">
                    <Order>4</Order>
                    <Type>Primary</Type>
                    <Extend>true</Extend>
                    </CreatePartition>
                </CreatePartitions>
                <ModifyPartitions>
                    <!-- Windows RE Tools partition -->
                    <ModifyPartition wcm:action="add">
                    <Order>1</Order>
                    <PartitionID>1</PartitionID>
                    <Label>WINRE</Label>
                    <Format>NTFS</Format>
                    <TypeID>DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</TypeID>
                    </ModifyPartition>
                    <!-- System partition (ESP) -->
                    <ModifyPartition wcm:action="add">
                    <Order>2</Order>
                    <PartitionID>2</PartitionID>
                    <Label>System</Label>
                    <Format>FAT32</Format>
                    </ModifyPartition>
                    <!-- MSR partition does not need to be modified -->
                    <ModifyPartition wcm:action="add">
                    <Order>3</Order>
                    <PartitionID>3</PartitionID>
                    </ModifyPartition>
                    <!-- Windows partition -->
                    <ModifyPartition wcm:action="add">
                    <Order>4</Order>
                    <PartitionID>4</PartitionID>
                    <Label>OS</Label>
                    <Letter>C</Letter>
                    <Format>NTFS</Format>
                    </ModifyPartition>
                </ModifyPartitions>
                </Disk>
            </DiskConfiguration>
            <ImageInstall>
                <OSImage>
                <InstallTo>
                    <DiskID>0</DiskID>
                    <PartitionID>4</PartitionID>
                </InstallTo>
                <InstallToAvailablePartition>false</InstallToAvailablePartition>
                </OSImage>
            </ImageInstall>

        END_BODY_PASS_WINPE_DISK

        cat << END_BODY_PASS_WINPE_USERDATA >> "${TEMP_FILE}"
            <UserData>
                <ProductKey>
                <!-- Do not uncomment the Key element if you are using trial ISOs -->
                <!-- You must uncomment the Key element (and optionally insert your own key) if you are using retail or volume license ISOs -->
                <Key />
                <WillShowUI>Never</WillShowUI>
                </ProductKey>
                <AcceptEula>true</AcceptEula>
                <FullName>${USER_NAME}</FullName>
                <Organization />
            </UserData>
        END_BODY_PASS_WINPE_USERDATA

        cat << END_BODY_PASS_WINPE_FOOTER >> "${TEMP_FILE}"
            </component>
        </settings>
        END_BODY_PASS_WINPE_FOOTER
        #########################################################   End Body Pass WinPE    #########################################################


        #########################################################   Body Pass Offline Services   #########################################################
        cat << END_BODY_PASS_OFFLINESVC >> "${TEMP_FILE}"
        <settings pass="offlineServicing">
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-LUA-Settings" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <EnableLUA>${ENABLE_LUA}</EnableLUA>
            </component>
        </settings>
        END_BODY_PASS_OFFLINESVC
        #########################################################   End Body Pass Offline Services   #########################################################


        #########################################################   Body Pass Generalize   #########################################################
        cat << END_BODY_PASS_GENERALIZE >> "${TEMP_FILE}"
        <settings pass="generalize">
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-Security-SPP" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <SkipRearm>${SKIP_REARM}</SkipRearm>
            </component>
        </settings>
        END_BODY_PASS_GENERALIZE
        #########################################################   End Body Pass Generalize   #########################################################


        #########################################################   Body Pass Specialize   #########################################################
        cat << END_BODY_PASS_SPECIALIZE >> "${TEMP_FILE}"
        <settings pass="specialize">
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-International-Core" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <InputLocale>${INPUT_LOCALE}</InputLocale>
            <SystemLocale>${UI_LANGUAGE}</SystemLocale>
            <UILanguage>${UI_LANGUAGE}</UILanguage>
            <UILanguageFallback>${UI_LANGUAGE}</UILanguageFallback>
            <UserLocale>${UI_LANGUAGE}</UserLocale>
            </component>
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-Security-SPP-UX" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <SkipAutoActivation>${SKIP_AUTO_ACTIVATION}</SkipAutoActivation>
            </component>
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-SQMApi" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <CEIPEnabled>${CEIP_ENABLED}</CEIPEnabled>
            </component>
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-Shell-Setup" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <ComputerName>${HOSTNAME}</ComputerName>
            <ProductKey>${PRODUCT_KEY}</ProductKey>
            </component>
        </settings>
        END_BODY_PASS_SPECIALIZE
        #########################################################   End Body Pass Specialize   #########################################################


        #########################################################   Body Pass OOBE   #########################################################
        cat << END_BODY_PASS_OOBE >> "${TEMP_FILE}"
        <settings pass="oobeSystem">
            <component xmlns:wcm="${COMPONENT_SCHEMA_STATE}" xmlns:xsi="${COMPONENT_SCHEMA_INSTANCE}" name="Microsoft-Windows-Shell-Setup" processorArchitecture="${PROCESSOR_ARCH}" publicKeyToken="${MS_PUBLIC_KEY}" language="${language}" versionScope="${VERSION_SCOPE}">
            <AutoLogon>
                <Password>
                <Value>${USER_PASSWORD}</Value>
                <PlainText>${USER_PASSWORD_PLAINTEXT}</PlainText>
                </Password>
                <Enabled>true</Enabled>
                <Username>${USER_NAME}</Username>
            </AutoLogon>
            <OOBE>
                <HideEULAPage>true</HideEULAPage>
                <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>
                <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
                <NetworkLocation>${NETWORK_LOCATION}</NetworkLocation>
                <SkipUserOOBE>true</SkipUserOOBE>
                <SkipMachineOOBE>true</SkipMachineOOBE>
                <ProtectYourPC>${PROTECT_YOUR_PC}</ProtectYourPC>
            </OOBE>
            <UserAccounts>
                <LocalAccounts>
                <LocalAccount wcm:action="add">
                    <Password>
                    <Value>${USER_PASSWORD}</Value>
                    <PlainText>${USER_PASSWORD_PLAINTEXT}</PlainText>
                    </Password>
                    <Description />
                    <DisplayName>${USER_NAME}</DisplayName>
                    <Group>${USER_PRIMARY_GROUP}</Group>
                    <Name>${USER_NAME}</Name>
                </LocalAccount>
                </LocalAccounts>
            </UserAccounts>
            <RegisteredOrganization />
            <RegisteredOwner>${USER_NAME}</RegisteredOwner>
            <DisableAutoDaylightTimeSet>${DISABLE_AUTO_DAY_LIGHT_TIME_SET}</DisableAutoDaylightTimeSet>
            <FirstLogonCommands>
                <SynchronousCommand wcm:action="add">
                <Description>Control Panel View</Description>
                <Order>1</Order>
                <CommandLine>reg add "${REG_KEY_CONTROLPANEL}" /v StartupPage /t REG_DWORD /d 1 /f</CommandLine>
                <RequiresUserInput>true</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                <Order>2</Order>
                <Description>Control Panel Icon Size</Description>
                <RequiresUserInput>false</RequiresUserInput>
                <CommandLine>reg add "${REG_KEY_CONTROLPANEL}" /v AllItemsIconView /t REG_DWORD /d 0 /f</CommandLine>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                <Order>3</Order>
                <RequiresUserInput>false</RequiresUserInput>
                <CommandLine>cmd /C wmic useraccount where name="${USER_NAME}" set PasswordExpires=false</CommandLine>
                <Description>Password Never Expires</Description>
                </SynchronousCommand>
            </FirstLogonCommands>
            <TimeZone>Pacific Standard Time</TimeZone>
            </component>
        </settings>
        END_BODY_PASS_OOBE
        #########################################################   End Body Pass OOBE   #########################################################


        #########################################################   File Footer   #########################################################
        cat << END_FOOTER >> "${TEMP_FILE}"
        </unattend>
        END_FOOTER
        #########################################################   End File Footer   #########################################################


        #########################################################   file is done, post work   #########################################################
        cp "${TEMP_FILE}" "${FINAL_FILE}"
        #########################################################   end post work    #########################################################




        ######################################################### End Generate File #################################################################
        #############################################################################################################################################

        echo "done. check out: ${FINAL_FILE}"
        ''' % (final_file, input_data['processor_arch'], input_data['ui_language'], input_data['input_locale'], input_data['user_name'], input_data['user_password_plaintext'], input_data['user_password'], input_data['user_primary_group'], input_data['hostname'], input_data['product_key'], input_data['skip_rearm'], input_data['enable_lua'], input_data['skip_auto_activation'], input_data['ceip_enabled'], input_data['disable_auto_day_light_time_set'], input_data['protect_your_pc'], input_data['network_location'])

        with open(script_file, 'wt', encoding='utf-8') as f:
            f.write(script_content)
        WriteJobProgress(job_id, 50)
        with open(log_file_stdout, "wb") as out, open(log_file_stderr, "wb") as err:
            subprocess.run(["/bin/bash", script_file], stdout=out, stderr=err)

    except Exception as e:
        logmessage('Unexpected exception while running CreateUnattended_Windows: %s' % e)


def CreateUnattended_Debian(job_id, orig_data):
    logmessage('creating an unattended answer file for debian')
    input_data = CorrectInputData(orig_data)
    try:
        file_name = input_data['filename']
        if not file_name:
            raise Exception('missing "name" from input_data')
        final_file = '%s/%s' % (UNATTENDED_FOLDER, file_name)
        if os.path.exists(final_file):
            raise Exception('file named: %s already exists' % final_file)
        job_folder = '%s/%s' % (JOB_STATUS_FOLDER, job_id)
        script_file = '%s/jobscript.sh' % job_folder
        log_file_stdout = '%s/log-stdout.txt' % job_folder
        log_file_stderr = '%s/log-stderr.txt' % job_folder
        script_content = '''
#!/bin/bash
# Netboot Studio - generate unattend.cfg for debian

#    This file is part of Netboot Studio, a system for managing netboot clients
#    Copyright (C) 2019 James Bishop (jamesbishop2006@gmail.com)

# best heredoc explanation ever: https://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash


######################################################### provided by python side
FINAL_FILE='%s'

######################################################### end provided by python side

# static vars
HEADER_COMMENT='Autogenerated by Netboot Studio'

if [ -f "${FINAL_FILE}" ]; then
    echo "target file already exists, aborting"
    echo "target file: ${FINAL_FILE}"
    exit 1
fi

touch "${FINAL_FILE}" || {
    echo "failed to touch ${FINAL_FILE}, aborting"
    exit 1
}

# Local vars
TEMP_FILE=$(mktemp)

# list of bool vars that need to actually be 1 or 0
BOOL_INT_VARS=''

# List of important vars
ALL_IMPORTANT_VARS='FINAL_FILE
HEADER_COMMENT
'

# check important vars
function checkVars {
    for VAR in $ALL_IMPORTANT_VARS; do
      if [ -z "${!VAR}" ]; then
        echo "var [$VAR] has unacceptable value: ${!VAR}"
        exit 0
      fi
      for INT_VAR in $BOOL_INT_VARS; do
        # if this varname is in list of bool_int_vars then convert its value to 0 or 1
        if [ "$VAR" = "$INT_VAR" ]; then
          if [ "${!VAR}" = "true" ] || [ "${!VAR}" = "True" ]; then
            eval "${VAR}=1"
          else
            eval "${VAR}=0"
          fi
          echo "converted $VAR to boolint value: ${!VAR}"
        fi
      done
    done
    echo "Variable check successfull"
}

# for debugging, print all important vars and their values
function showVars {
  for VAR in $ALL_IMPORTANT_VARS; do
    echo "${VAR}=\\"${!VAR}\\""
  done
}

checkVars
# showVars

######################################################### Generate File Starts Here #########################################################
#############################################################################################################################################



######################################################### End Generate File #################################################################
#############################################################################################################################################

#########################################################   file is done, post work   #########################################################
cp "${TEMP_FILE}" "${FINAL_FILE}"
#########################################################   end post work    #########################################################


echo "done. check out: ${FINAL_FILE}"
        ''' % (final_file)

        with open(script_file, 'wt', encoding='utf-8') as f:
            f.write(script_content)
        WriteJobProgress(job_id, 50)
        with open(log_file_stdout, "wb") as out, open(log_file_stderr, "wb") as err:
            subprocess.run(["/bin/bash", script_file], stdout=out, stderr=err)

    except Exception as e:
        logmessage('Unexpected exception while running CreateUnattended_Debian: %s' % e)


def CreateUnattended_VMware(job_id, orig_data):
    logmessage('creating an unattended answer file for debian')
    input_data = CorrectInputData(orig_data)
    try:
        file_name = input_data['filename']
        if not file_name:
            raise Exception('missing "name" from input_data')
        final_file = '%s/%s' % (UNATTENDED_FOLDER, file_name)
        if os.path.exists(final_file):
            raise Exception('file named: %s already exists' % final_file)
        job_folder = '%s/%s' % (JOB_STATUS_FOLDER, job_id)
        script_file = '%s/jobscript.sh' % job_folder
        log_file_stdout = '%s/log-stdout.txt' % job_folder
        log_file_stderr = '%s/log-stderr.txt' % job_folder
        script_content = '''
        #!/bin/bash
        # Netboot Studio - generate unattend.cfg for vmware

        #    This file is part of Netboot Studio, a system for managing netboot clients
        #    Copyright (C) 2019 James Bishop (jamesbishop2006@gmail.com)

        # best heredoc explanation ever: https://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash


        ######################################################### provided by python side
        FINAL_FILE='%s'

        ######################################################### end provided by python side

        # static vars
        HEADER_COMMENT='Autogenerated by Netboot Studio'

        if [ -f "${FINAL_FILE}" ]; then
            echo "target file already exists, aborting"
            echo "target file: ${FINAL_FILE}"
            exit 1
        fi

        touch "${FINAL_FILE}" || {
            echo "failed to touch ${FINAL_FILE}, aborting"
            exit 1
        }

        # Local vars
        TEMP_FILE=$(mktemp)

        # list of bool vars that need to actually be 1 or 0
        BOOL_INT_VARS=''

        # List of important vars
        ALL_IMPORTANT_VARS='FINAL_FILE
        HEADER_COMMENT
        '

        # check important vars
        function checkVars {
            for VAR in $ALL_IMPORTANT_VARS; do
            if [ -z "${!VAR}" ]; then
                echo "var [$VAR] has unacceptable value: ${!VAR}"
                exit 0
            fi
            for INT_VAR in $BOOL_INT_VARS; do
                # if this varname is in list of bool_int_vars then convert its value to 0 or 1
                if [ "$VAR" = "$INT_VAR" ]; then
                if [ "${!VAR}" = "true" ] || [ "${!VAR}" = "True" ]; then
                    eval "${VAR}=1"
                else
                    eval "${VAR}=0"
                fi
                echo "converted $VAR to boolint value: ${!VAR}"
                fi
            done
            done
            echo "Variable check successfull"
        }

        # for debugging, print all important vars and their values
        function showVars {
        for VAR in $ALL_IMPORTANT_VARS; do
            echo "${VAR}=\\"${!VAR}\\""
        done
        }

        checkVars
        # showVars

        ######################################################### Generate File Starts Here #########################################################
        #############################################################################################################################################



        ######################################################### End Generate File #################################################################
        #############################################################################################################################################

        #########################################################   file is done, post work   #########################################################
        cp "${TEMP_FILE}" "${FINAL_FILE}"
        #########################################################   end post work    #########################################################


        echo "done. check out: ${FINAL_FILE}"
        ''' % (final_file)

        with open(script_file, 'wt', encoding='utf-8') as f:
            f.write(script_content)
        WriteJobProgress(job_id, 50)
        with open(log_file_stdout, "wb") as out, open(log_file_stderr, "wb") as err:
            subprocess.run(["/bin/bash", script_file], stdout=out, stderr=err)

    except Exception as e:
        logmessage('Unexpected exception while running CreateUnattended_VMware: %s' % e)
